// Code generated by protoc-gen-go.
// source: git.proto
// DO NOT EDIT!

/*
Package gen is a generated protocol buffer package.

It is generated from these files:
	git.proto

It has these top-level messages:
	Command
	Output
*/
package gen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Dir     string `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Command) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

type Output struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Output) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "gen.Command")
	proto.RegisterType((*Output)(nil), "gen.Output")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GitService service

type GitServiceClient interface {
	Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (GitService_ExecuteClient, error)
}

type gitServiceClient struct {
	cc *grpc.ClientConn
}

func NewGitServiceClient(cc *grpc.ClientConn) GitServiceClient {
	return &gitServiceClient{cc}
}

func (c *gitServiceClient) Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (GitService_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GitService_serviceDesc.Streams[0], c.cc, "/gen.GitService/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_ExecuteClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type gitServiceExecuteClient struct {
	grpc.ClientStream
}

func (x *gitServiceExecuteClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GitService service

type GitServiceServer interface {
	Execute(*Command, GitService_ExecuteServer) error
}

func RegisterGitServiceServer(s *grpc.Server, srv GitServiceServer) {
	s.RegisterService(&_GitService_serviceDesc, srv)
}

func _GitService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Command)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).Execute(m, &gitServiceExecuteServer{stream})
}

type GitService_ExecuteServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type gitServiceExecuteServer struct {
	grpc.ServerStream
}

func (x *gitServiceExecuteServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

var _GitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gen.GitService",
	HandlerType: (*GitServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _GitService_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "git.proto",
}

func init() { proto.RegisterFile("git.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcf, 0x2c, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x4f, 0xcd, 0x53, 0x32, 0xe5, 0x62, 0x77, 0xce,
	0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x11, 0x92, 0xe0, 0x62, 0x4f, 0x86, 0x30, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x01, 0x2e, 0xe6, 0x94, 0xcc, 0x22, 0x09, 0x26, 0xb0, 0x28,
	0x88, 0xa9, 0xa4, 0xc4, 0xc5, 0xe6, 0x5f, 0x5a, 0x52, 0x50, 0x5a, 0x02, 0xd2, 0x95, 0x9b, 0x5a,
	0x5c, 0x9c, 0x98, 0x9e, 0x0a, 0xd3, 0x05, 0xe5, 0x1a, 0x99, 0x71, 0x71, 0xb9, 0x67, 0x96, 0x04,
	0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x69, 0x70, 0xb1, 0xbb, 0x56, 0xa4, 0x26, 0x97, 0x96,
	0xa4, 0x0a, 0xf1, 0xe8, 0xa5, 0xa7, 0xe6, 0xe9, 0x41, 0xad, 0x95, 0xe2, 0x06, 0xf3, 0x20, 0xa6,
	0x29, 0x31, 0x18, 0x30, 0x26, 0xb1, 0x81, 0x9d, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x02,
	0x75, 0xa8, 0x19, 0xab, 0x00, 0x00, 0x00,
}
